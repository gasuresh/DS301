p_value = summary_info$coefficients[, "Pr(>|t|)"],
residuals = residuals
)
multiple_model <- lm(crim ~ ., data = Boston)
print(summary(multiple_model))
coefficients <- coef(multiple_model)
summary_info <- summary(multiple_model)
residuals <- residuals(multiple_model)
print(residuals)
multiple_results <- tibble(
predictor = names(coefficients),
coefficient = coefficients,
std_error = summary_info$coefficients[, "Std. Error"],
t_value = summary_info$coefficients[, "t value"],
p_value = summary_info$coefficients[, "Pr(>|t|)"],
residuals = residuals
)
multiple_model <- lm(crim ~ ., data = Boston)
print(summary(multiple_model))
coefficients <- coef(multiple_model)
summary_info <- summary(multiple_model)
multiple_results <- tibble(
predictor = names(coefficients),
coefficient = coefficients,
std_error = summary_info$coefficients[, "Std. Error"],
t_value = summary_info$coefficients[, "t value"],
p_value = summary_info$coefficients[, "Pr(>|t|)"],
)
print(multiple_results)
regression_results <- tibble()
predictors <- names(Boston)[names(Boston) != "crim"]
for (predictor in predictors) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
result <- tibble(
predictor = predictor,
intercept = coef(model)[1],
coefficient = coef(model)[2],
std_error = summary(model)$coefficients[2, "Std. Error"],
t_value = summary(model)$coefficients[2, "t value"],
p_value = summary(model)$coefficients[2, "Pr(>|t|)"],
R_squared = summary(model)$r.squared
)
regression_results <- bind_rows(regression_results, result)
}
# Print the regression results
print(regression_results)
for (predictor in predictors) {
print(
ggplot(Boston, aes(x = .data[[predictor]], y = crim)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Simple Linear Regression -", predictor),
x = predictor,
y = "crim")
)
}
# Function to get coefficients for simple linear regression
get_simple_regression_coefficients <- function(predictor) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
return(tibble(
predictor = predictor,
coefficient = coef(model)[2]
))
}
# List of predictor variables
predictors <- names(Boston)[names(Boston) != "crim"]
# Get simple linear regression coefficients
simple_regression_coefficients <- map_dfr(predictors, get_simple_regression_coefficients)
# Fit multiple regression model
multiple_model <- lm(crim ~ ., data = Boston)
multiple_regression_coefficients <- coef(multiple_model)[-1]  # Exclude intercept
# Combine coefficients into a single dataframe
comparison_data <- bind_rows(
mutate(simple_regression_coefficients, model = "Simple Regression"),
tibble(predictor = names(multiple_regression_coefficients), coefficient = multiple_regression_coefficients, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(comparison_data, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
# Function to get coefficients for simple linear regression
get_simple_regression_coefficients <- function(predictor) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
return(tibble(
predictor = predictor,
coefficient = coef(model)[2]
))
}
# List of predictor variables
predictors <- names(Boston)[names(Boston) != "crim"]
# Get simple linear regression coefficients
simple_regression_coefficients <- map_dfr(predictors, get_simple_regression_coefficients)
multiple_regression_coefficients <- coef(multiple_model)[-1]  # Exclude intercept
comparison_data <- bind_rows(
mutate(simple_regression_coefficients, model = "Simple Regression"),
tibble(predictor = names(multiple_regression_coefficients), coefficient = multiple_regression_coefficients, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(comparison_data, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("ISLR2") #you only need to do this one time.
library(ISLR2)
auto <- read.table("Auto.data", header = TRUE)
cat("Number of rows:", dim(auto)[1], "\n")
cat("Number of columns:", dim(auto)[2], "\n")
auto <- auto %>%
filter_all(all_vars(. != "?")) %>%
na.omit()
cat("Number of rows:", dim(auto)[1], "\n")
cat("Number of columns:", dim(auto)[2], "\n")
factor_columns <- sapply(df, is.factor)
#1e
print(head(auto, 10))
#1f.
print(auto[c(10, 14, 29), ])
#1g.
auto[c(10, 14, 29), c("displacement", "horsepower")]
auto$horsepower <- as.numeric(auto$horsepower)
result <- mean(auto %>% filter(horsepower < 200) %>% pull(mpg))
#1i
ggplot(auto, aes(x = horsepower, y = mpg)) +
geom_point() +
labs(title = "Scatter Plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per Gallon")
#1j.
auto %>%
ggplot(aes(x = factor(year), y = acceleration)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot of Acceleration by Year",
x = "Year",
y = "Acceleration")
head(Boston)
average_crime_rate <- mean(Boston$crim)
print(average_crime_rate)
average_crim_rate_near_river <- mean(Boston$crim[Boston$chas == 1])
average_crim_rate_not_near_river <- mean(Boston$crim[Boston$chas == 0])
cat("Average Crime Rate for Suburbs Near Charles River:", average_crim_rate_near_river, "\n")
cat("Average Crime Rate for Suburbs Not Near Charles River:", average_crim_rate_not_near_river, "\n")
summary_stats <- Boston %>%
summarise(mean_crime = mean(crim),
sd_crime = sd(crim),
high_crime_threshold = mean(crim) + 2 * sd(crim))
high_crime_threshold <- summary_stats$high_crime_threshold
high_crime_suburbs <- Boston %>%
filter(crim > high_crime_threshold)
correlation_matrix <- cor(Boston)
cor_with_crim <- correlation_matrix[,"crim"]
lstat_model <- lm(crim ~ lstat, data = Boston)
predictors <- colnames(Boston)[-which(colnames(Boston) == "crim")]  # Exclude "crim" from predictors
# Create an empty data frame to store results
results <- tibble(
Predictor = character(),
Coefficient = numeric(),
Intercept = numeric(),
ResidualMean = numeric(),
ResidualSD = numeric(),
R_squared = numeric(),
P_Value = numeric()
)
for (predictor in predictors) {
predictor_model <- lm(crim ~ get(predictor), data = Boston)
coef <- coef(predictor_model)
residuals <- residuals(predictor_model)
row <- tibble(
Predictor = predictor,
Coefficient = coef[2],
Intercept = coef[1],
ResidualMean = mean(residuals),
ResidualSD = sd(residuals),
R_squared = summary(predictor_model)$r.squared,
P_Value = p_values
)
results <- bind_rows(results, row)
}
print(results)
# Use p-values to determine what is statistically significant
# 0.05 is a common threshold value
significant_results <- results %>%
filter(P_Value < 0.05)
print(significant_results)
plots <- list()
for (row in 1:nrow(significant_results)) {
predictor_name <- significant_results$Predictor[row]
# Fit the linear regression model
predictor_model <- lm(paste("crim ~", predictor_name), data = Boston)
# Create a scatterplot with regression line
plot <- ggplot(Boston, aes_string(x = predictor_name, y = "crim")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = paste("Linear Regression for", predictor_name),
x = predictor_name, y = "Per Capita Crime Rate")
plots[[predictor_name]] <- plot
}
print(plots)
regression_results <- tibble()
predictors <- names(Boston)[names(Boston) != "crim"]
for (predictor in predictors) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
result <- tibble(
predictor = predictor,
intercept = coef(model)[1],
coefficient = coef(model)[2],
std_error = summary(model)$coefficients[2, "Std. Error"],
t_value = summary(model)$coefficients[2, "t value"],
p_value = summary(model)$coefficients[2, "Pr(>|t|)"],
R_squared = summary(model)$r.squared
)
regression_results <- bind_rows(regression_results, result)
}
# Print the regression results
print(regression_results)
for (predictor in predictors) {
print(
ggplot(Boston, aes(x = .data[[predictor]], y = crim)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Simple Linear Regression -", predictor),
x = predictor,
y = "crim")
)
}
multiple_model <- lm(crim ~ ., data = Boston)
print(summary(multiple_model))
coefficients <- coef(multiple_model)
summary_info <- summary(multiple_model)
multiple_results <- tibble(
predictor = names(coefficients),
coefficient = coefficients,
std_error = summary_info$coefficients[, "Std. Error"],
t_value = summary_info$coefficients[, "t value"],
p_value = summary_info$coefficients[, "Pr(>|t|)"],
)
print(multiple_results)
simple_coeffs <- results %>%
filter(Predictor %in% names(coefficients)) %>%
select(Predictor, Coefficient)
comparison_data <- bind_rows(
mutate(simple_coeffs, Model = "Simple"),
mutate(multiple_results, Model = "Multiple")
)
ggplot(comparison_data, aes(x = Predictor, y = Coefficient, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
# Function to get coefficients for simple linear regression
get_simple_regression_coefficients <- function(predictor) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
return(tibble(
predictor = predictor,
coefficient = coef(model)[2]
))
}
# List of predictor variables
predictors <- names(Boston)[names(Boston) != "crim"]
# Get simple linear regression coefficients
simple_regression_coefficients <- map_dfr(predictors, get_simple_regression_coefficients)
multiple_regression_coefficients <- coef(multiple_model)[-1]  # Exclude intercept
comparison_data <- bind_rows(
mutate(simple_regression_coefficients, model = "Simple Regression"),
tibble(predictor = names(multiple_regression_coefficients), coefficient = multiple_regression_coefficients, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(comparison_data, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
combined_results <- bind_rows(
mutate(regression_results, model = "Simple Regression"),
mutate(multiple_results, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(combined_results, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
regression_results <- regression_results %>%
filter(predictor != "(Intercept)")
multiple_results <- multiple_results %>%
filter(predictor != "(Intercept)")
combined_results <- bind_rows(
mutate(regression_results, model = "Simple Regression"),
mutate(multiple_results, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(combined_results, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
combined_results
View(combined_results)
regression_results <- regression_results %>%
filter(predictor != "(Intercept)")
combined_results <- bind_rows(
mutate(regression_results, model = "Simple Regression"),
mutate(multiple_results, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(combined_results, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
regression_results <- tibble()
predictors <- names(Boston)[names(Boston) != "crim"]
for (predictor in predictors) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
result <- tibble(
predictor = predictor,
intercept = coef(model)[1],
coefficient = coef(model)[2],
std_error = summary(model)$coefficients[2, "Std. Error"],
t_value = summary(model)$coefficients[2, "t value"],
p_value = summary(model)$coefficients[2, "Pr(>|t|)"],
R_squared = summary(model)$r.squared
)
regression_results <- bind_rows(regression_results, result)
}
# Print the regression results
print(regression_results)
for (predictor in predictors) {
# Skip plotting for 'chas'
if (predictor != "chas") {
print(
ggplot(Boston, aes(x = .data[[predictor]], y = crim)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Simple Linear Regression -", predictor),
x = predictor,
y = "crim")
)
}
}
regression_results <- tibble()
predictors <- names(Boston)[names(Boston) != "crim"]
for (predictor in predictors) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
result <- tibble(
predictor = predictor,
intercept = coef(model)[1],
coefficient = coef(model)[2],
std_error = summary(model)$coefficients[2, "Std. Error"],
t_value = summary(model)$coefficients[2, "t value"],
p_value = summary(model)$coefficients[2, "Pr(>|t|)"],
R_squared = summary(model)$r.squared
)
regression_results <- bind_rows(regression_results, result)
}
for (predictor in predictors) {
if (predictor != "chas") {
print(
ggplot(Boston, aes(x = .data[[predictor]], y = crim)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Simple Linear Regression -", predictor),
x = predictor,
y = "crim")
)
}
}
View(regression_results)
regression_results
regression_results <- regression_results %>%
filter(predictor != "(Intercept)")
combined_results <- bind_rows(
mutate(regression_results, model = "Simple Regression"),
mutate(multiple_results, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(combined_results, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
summary(multiple_model)
### Problem 3: Interpreting Multiple Linear Regression Models
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("ISLR2") #you only need to do this one time.
library(ISLR2)
auto <- read.table("Auto.data", header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("ISLR2") #you only need to do this one time.
library(ISLR2)
auto <- read.table("Auto.data", header = TRUE)
auto <- auto %>%
filter_all(all_vars(. != "?")) %>%
na.omit()
#1c.
factor_columns <- sapply(df, is.factor)
#1e
print(head(auto, 10))
#1f.
print(auto[c(10, 14, 29), ])
#1g.
auto[c(10, 14, 29), c("displacement", "horsepower")]
#1h.
auto$horsepower <- as.numeric(auto$horsepower)
result <- mean(auto %>% filter(horsepower < 200) %>% pull(mpg))
#1i
ggplot(auto, aes(x = horsepower, y = mpg)) +
geom_point() +
labs(title = "Scatter Plot of mpg vs. hp",
x = "Horsepower",
y = "Miles per Gallon")
#1j.
auto %>%
ggplot(aes(x = factor(year), y = acceleration)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot of Acceleration by Year",
x = "Year",
y = "Acceleration")
head(Boston)
#2c.
average_crime_rate <- mean(Boston$crim)
#2d.
average_crim_rate_near_river <- mean(Boston$crim[Boston$chas == 1])
average_crim_rate_not_near_river <- mean(Boston$crim[Boston$chas == 0])
#2e.
summary_stats <- Boston %>%
summarise(mean_crime = mean(crim),
sd_crime = sd(crim),
high_crime_threshold = mean(crim) + 2 * sd(crim))
high_crime_threshold <- summary_stats$high_crime_threshold
high_crime_suburbs <- Boston %>%
filter(crim > high_crime_threshold)
#2f.
correlation_matrix <- cor(Boston)
cor_with_crim <- correlation_matrix[,"crim"]
#2g.
lstat_model <- lm(crim ~ lstat, data = Boston)
#2h.
regression_results <- tibble()
predictors <- names(Boston)[names(Boston) != "crim"]
for (predictor in predictors) {
formula <- formula(paste("crim ~", predictor))
model <- lm(formula, data = Boston)
result <- tibble(
predictor = predictor,
intercept = coef(model)[1],
coefficient = coef(model)[2],
std_error = summary(model)$coefficients[2, "Std. Error"],
t_value = summary(model)$coefficients[2, "t value"],
p_value = summary(model)$coefficients[2, "Pr(>|t|)"],
R_squared = summary(model)$r.squared
)
regression_results <- bind_rows(regression_results, result)
}
for (predictor in predictors) {
if (predictor != "chas") {
print(
ggplot(Boston, aes(x = .data[[predictor]], y = crim)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste("Simple Linear Regression -", predictor),
x = predictor,
y = "crim")
)
}
}
#2i.
multiple_model <- lm(crim ~ ., data = Boston)
coefficients <- coef(multiple_model)
summary_info <- summary(multiple_model)
multiple_results <- tibble(
predictor = names(coefficients),
coefficient = coefficients,
std_error = summary_info$coefficients[, "Std. Error"],
t_value = summary_info$coefficients[, "t value"],
p_value = summary_info$coefficients[, "Pr(>|t|)"],
)
#2j.
regression_results <- regression_results %>%
filter(predictor != "(Intercept)")
combined_results <- bind_rows(
mutate(regression_results, model = "Simple Regression"),
mutate(multiple_results, model = "Multiple Regression")
)
# Plot comparing coefficients
ggplot(combined_results, aes(x = predictor, y = coefficient, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Regression Coefficients",
x = "Predictor",
y = "Coefficient") +
theme_minimal()
