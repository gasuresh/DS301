train_mat = model.matrix(Y ~ ., data = train_data)
coef_m = coef(best_train, id = i)
pred = train_mat[, names(coef_m)] %*% coef_m
val_errors[i] = mean((pred - train_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
val_errors = rep(NA, p)
for (i in 1:p)
{
test_mat = model.matrix(Y ~ ., data = test_data)
coef_m = coef(best_train, id = i)
pred = test_mat[, names(coef_m)] %*% coef_m
val_errors[i] = mean((pred - test_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#2c.
val_errors = rep(NA, p)
for (i in 1:p)
{
test_mat = model.matrix(Y ~ ., data = test_data)
coef_m = coef(best_train, id = i)
pred = test_mat[, names(coef_m)] %*% coef_m
val_errors[i] = mean((pred - test_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#2a.
set.seed(2)
p <- 20
n <- 1000
error <- rnorm(n, 0, 1)
beta <- c(2, rep(0, 5), 1.2, 3, -2, 1.5, 7, rep(0, 5), 3, 4, 1, 9, 2)
Xmat <- matrix(rnorm(n * p), n, p)
X <- cbind(rep(1, n), Xmat)
Y <- X %*% beta + error
data <- data.frame(Y, Xmat)
train_indices <- sample(1:n, 100)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
#2b.
best_train = regsubsets(Y ~ ., data = train_data, nvmax = p)
val_errors = rep(NA, p)
for (i in 1:p)
{
train_mat = model.matrix(Y ~ ., data = train_data)
coef_m = coef(best_train, id = i)
pred = train_mat[, names(coef_m)] %*% coef_m
val_errors[i] = mean((pred - train_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
val_errors = rep(NA, p)
for (i in 1:p)
{
test_mat = model.matrix(Y ~ ., data = test_data)
coef_m = coef(best_train, id = i)
pred = test_mat[, names(coef_m)] %*% coef_m
val_errors[i] = mean((pred - test_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#2a.
set.seed(67)
p <- 20
n <- 1000
error <- rnorm(n, 0, 1)
beta <- c(2, rep(0, 5), 1.2, 3, -2, 1.5, 7, rep(0, 5), 3, 4, 1, 9, 2)
Xmat <- matrix(rnorm(n * p), n, p)
X <- cbind(rep(1, n), Xmat)
Y <- X %*% beta + error
data <- data.frame(Y, Xmat)
train_indices <- sample(1:n, 100)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
#2b.
best_train <- regsubsets(Y ~ ., data = train_data, nvmax = p)
val_errors <- rep(NA, p)
for (i in 1:p)
{
train_mat <- model.matrix(Y ~ ., data = train_data)
coef_m <- coef(best_train, id = i)
pred <- train_mat[, names(coef_m)] %*% coef_m
val_errors[i] <- mean((pred - train_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
best_model_index <- which.min(val_errors)
best_model_index
#2a.
set.seed(37)
p <- 20
n <- 1000
error <- rnorm(n, 0, 1)
beta <- c(2, rep(0, 5), 1.2, 3, -2, 1.5, 7, rep(0, 5), 3, 4, 1, 9, 2)
Xmat <- matrix(rnorm(n * p), n, p)
X <- cbind(rep(1, n), Xmat)
Y <- X %*% beta + error
data <- data.frame(Y, Xmat)
train_indices <- sample(1:n, 100)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
#2b.
best_train <- regsubsets(Y ~ ., data = train_data, nvmax = p)
val_errors <- rep(NA, p)
for (i in 1:p)
{
train_mat <- model.matrix(Y ~ ., data = train_data)
coef_m <- coef(best_train, id = i)
pred <- train_mat[, names(coef_m)] %*% coef_m
val_errors[i] <- mean((pred - train_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#1d.
best_model_index <- which.min(val_errors)
best_model_index
#2a.
set.seed(3)
p <- 20
n <- 1000
error <- rnorm(n, 0, 1)
beta <- c(2, rep(0, 5), 1.2, 3, -2, 1.5, 7, rep(0, 5), 3, 4, 1, 9, 2)
Xmat <- matrix(rnorm(n * p), n, p)
X <- cbind(rep(1, n), Xmat)
Y <- X %*% beta + error
data <- data.frame(Y, Xmat)
train_indices <- sample(1:n, 100)
train_data <- data[train_indices, ]
test_data <- data[-train_indices, ]
#2b.
best_train <- regsubsets(Y ~ ., data = train_data, nvmax = p)
val_errors <- rep(NA, p)
for (i in 1:p)
{
train_mat <- model.matrix(Y ~ ., data = train_data)
coef_m <- coef(best_train, id = i)
pred <- train_mat[, names(coef_m)] %*% coef_m
val_errors[i] <- mean((pred - train_data$Y)^2)
}
plot(1:p, val_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#1d.
best_model_index <- which.min(val_errors)
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#1d.
best_model_index <- which.min(val_errors)
best_model_index
#2b.
best_train <- regsubsets(Y ~ ., data = train_data, nvmax = p)
train_errors <- rep(NA, p)
for (i in 1:p)
{
train_mat <- model.matrix(Y ~ ., data = train_data)
coef_m <- coef(best_train, id = i)
pred <- train_mat[, names(coef_m)] %*% coef_m
train_errors[i] <- mean((pred - train_data$Y)^2)
}
plot(1:p, train_errors, type = "b", xlab = "Number of Predictors", ylab = "Training MSE")
#2c.
test_errors <- rep(NA, p)
for (i in 1:p) {
test_mat <- model.matrix(Y ~ ., data = test_data)
coef_m <- coef(best_train, id = i)
pred_test <- test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
plot(1:p, test_errors, type = "b", xlab = "Number of Predictors", ylab = "Test MSE")
#1d.
best_model_index <- which.min(test_errors)
best_model_index
#2d.
best_model_index <- which.min(test_errors)
#2e.
coef(regfit.full, which.min(val.errors))
#2e.
coef(best_train, which.min(val_errors))
#2e.
coef(best_train, which.min(test_errors))
#2e.
coef(best_train, which.min(test_errors))
beta_selected <- beta[c(1, 6:10, 16:20)]
coef_m
beta_selected
#2e.
coef_m <- coef(best_train, which.min(test_errors))
beta_selected <- beta[c(1, 6:10, 16:21)]
beta_selected
coef_m
#2e.
coef_m <- coef(best_train, which.min(test_errors))
beta_selected <- beta[c(6:10, 16:21)]
coef_m
beta_selected
#2e.
coef_m <- coef(best_train, which.min(test_errors))
beta_selected <- beta[c(6:11, 16:21)]
beta_selected
#2e.
coef_m <- coef(best_train, which.min(test_errors))
beta_selected <- beta[c(6:11, 17:21)]
beta_selected
coef_m
beta_selected
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
library(ISLR2)
#3a.
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
College
View(college)
View(College)
dim(College)
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
summary(regfit_fwd)
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
train_errors_forward <- rep(NA, p)
for (i in 1:p) {
coef_fwd <- coef(regfit_fwd, id = i)
pred_fwd <- predict(regfit_fwd, id = i)
train_errors_forward[i] <- mean((train_data$Apps - pred_fwd)^2)
}
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
forward_test_errors <- rep(NA, p)
for (i in 1:p) {
forward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_fwd, id = i)
pred_test <- forward_test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
forward_test_errors <- rep(NA, p)
for (i in 1:p) {
forward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_fwd, id = i)
pred_test <- forward_test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
backward_test_errors <- rep(NA, p)
for (i in 1:p) {
backward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_bwd, id = i)
pred_test <- backward_test_mat[, names(coef_m)] %*% coef_m
test_errors[i] <- mean((pred_test - test_data$Y)^2)
}
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
forward_test_errors <- rep(NA, p)
backward_test_errors <- rep(NA, p)
for (i in 1:p) {
forward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_fwd, id = i)
pred_test <- forward_test_mat[, names(coef_m)] %*% coef_m
forward_test_errors[i] <- mean((pred_test - test_data$Apps)^2)
backward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_bwd, id = i)
pred_test <- backward_test_mat[, names(coef_m)] %*% coef_m
backward_test_errors[i] <- mean((pred_test - test_data$Apps)^2)
}
#3a.
p <- 17
train_index <- sample(1:nrow(College), 0.9 * nrow(College))
train_data <- College[train_index, ]
test_data <- College[-train_index, ]
regfit_fwd <- regsubsets(Apps~.,data=College,nvmax=p, nbest = 1, method="forward")
regfit_bwd <- regsubsets(Apps~.,data=College,nvmax=p, method="backward")
forward_test_errors <- rep(NA, p)
backward_test_errors <- rep(NA, p)
for (i in 1:p) {
forward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_fwd, id = i)
pred_test <- forward_test_mat[, names(coef_m)] %*% coef_m
forward_test_errors[i] <- mean((pred_test - test_data$Apps)^2)
backward_test_mat <- model.matrix(Apps ~ ., data = test_data)
coef_m <- coef(regfit_bwd, id = i)
pred_test <- backward_test_mat[, names(coef_m)] %*% coef_m
backward_test_errors[i] <- mean((pred_test - test_data$Apps)^2)
}
min_mse_forward <- which.min(forward_test_errors)
min_mse_backward <- which.min(backward_test_errors)
min_mse_forward
min_mse_backward
regfit_fwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "forward")
summary_fwd_full <- summary(regfit_fwd_full)
regfit_bwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "backward")
summary_bwd_full <- summary(regfit_bwd_full)
best_model_fwd <- which.min(summary_fwd_full$aic)
best_model_bwd <- which.min(summary_bwd_full$aic)
best_model_fwd
best_model_bwd
regfit_fwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "forward")
summary_fwd_full <- summary(regfit_fwd_full)
regfit_bwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "backward")
summary_bwd_full <- summary(regfit_bwd_full)
n <- dim(College)[1]
p <- rowSums(summary_fwd_full$which)
fwd_adjr2 <- summary_fwd_full$adjr2
fwd_cp <- summary_fwd_full$cp
fwd_rss <- summary_fwd_full$rss
fwd_AIC <- n*log(rss/n) + 2*(p)
regfit_fwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "forward")
summary_fwd_full <- summary(regfit_fwd_full)
regfit_bwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "backward")
summary_bwd_full <- summary(regfit_bwd_full)
n <- dim(College)[1]
p <- rowSums(summary_fwd_full$which)
fwd_adjr2 <- summary_fwd_full$adjr2
fwd_cp <- summary_fwd_full$cp
fwd_rss <- summary_fwd_full$rss
fwd_AIC <- n*log(fwd_rss/n) + 2*(p)
fwd_BIC <- n*log(fwd_rss/n) + (p)*log(n)
fwd_subset_table <- data.frame(RSS = fwd_rss, Adj_R2 = fwd_adjr2, Cp = fwd_cp, AIC = fwd_AIC, BIC = fwd_BIC)
n <- dim(College)[1]
p <- rowSums(summary_bwd_full$which)
bwd_adjr2 <- summary_bwd_full$adjr2
bwd_cp <- summary_bwd_full$cp
bwd_rss <- summary_bwd_full$rss
bwd_AIC <- n*log(bwd_rss/n) + 2*(p)
bwd_BIC <- n*log(bwd_rss/n) + (p)*log(n)
bwd_subset_table <- data.frame(RSS = bwd_rss, Adj_R2 = bwd_adjr2, Cp = bwd_cp, AIC = bwd_AIC, BIC = bwd_BIC)
best_model_fwd <- which.min(fwd_subset_table$aic)
best_model_bwd <- which.min(bwd_subset_table$aic)
best_model_fwd
best_model_bwd
regfit_fwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "forward")
summary_fwd_full <- summary(regfit_fwd_full)
regfit_bwd_full <- regsubsets(Apps ~ ., data = College, nvmax = p, method = "backward")
summary_bwd_full <- summary(regfit_bwd_full)
n <- dim(College)[1]
p <- rowSums(summary_fwd_full$which)
fwd_adjr2 <- summary_fwd_full$adjr2
fwd_cp <- summary_fwd_full$cp
fwd_rss <- summary_fwd_full$rss
fwd_AIC <- n*log(fwd_rss/n) + 2*(p)
fwd_BIC <- n*log(fwd_rss/n) + (p)*log(n)
fwd_subset_table <- data.frame(RSS = fwd_rss, Adj_R2 = fwd_adjr2, Cp = fwd_cp, AIC = fwd_AIC, BIC = fwd_BIC)
n <- dim(College)[1]
p <- rowSums(summary_bwd_full$which)
bwd_adjr2 <- summary_bwd_full$adjr2
bwd_cp <- summary_bwd_full$cp
bwd_rss <- summary_bwd_full$rss
bwd_AIC <- n*log(bwd_rss/n) + 2*(p)
bwd_BIC <- n*log(bwd_rss/n) + (p)*log(n)
bwd_subset_table <- data.frame(RSS = bwd_rss, Adj_R2 = bwd_adjr2, Cp = bwd_cp, AIC = bwd_AIC, BIC = bwd_BIC)
best_model_fwd <- which.min(fwd_subset_table$AIC)
best_model_bwd <- which.min(bwd_subset_table$AIC)
best_model_fwd
best_model_bwd
fwd_adjr2
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
library(ISLR2)
str(credit_data)
str(Credit)
model <- lm(Balance ~ Income + Student, data = Credit)
summary(fit)
model <- lm(Balance ~ Income + Student, data = Credit)
summary(model)
View(Credit)
fit <- lm(Balance ~ Income + Student, data = Credit)
summary(fit)
fit_students <- lm(Balance ~ Income, data = subset(Credit, Student == "Yes"))
summary(fit_students)
fit_nonstudents <- lm(Balance ~ Income, data = subset(Credit, Student == "No"))
summary(fit_nonstudents)
fit_students <- lm(Balance ~ Income, data = Credit)
fit_students <- lm(Balance ~ Income, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Students + Income, data = Credit)
fit_students <- lm(Balance ~ Student + Income, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Income + Student, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Income + Student, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Income, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Income + Student, data = Credit)
summary(fit_students)
fit_students <- lm(Balance ~ Income + Student, data = Credit)
fit_students_2 <- lm(Balance ~ Income, data = Credit)
summary(fit_students)
summary(fit_students_2)
fit_students <- lm(Balance ~ Income + Student, data = Credit)
fit_non_students <- lm(Balance ~ Income, data = Credit)
summary(fit_students)
summary(fit_non_students)
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
library(ISLR2)
library(tidyverse)
#5e.
ggplot(data = Credit, aes(x = Income, y = Balance, color = Student)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Income vs Balance for Students",
x = "Income", y = "Balance") +
theme_minimal()
# Plot for non-students
ggplot(data = Credit, aes(x = Income, y = Balance)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Income vs Balance for Non-Students",
x = "Income", y = "Balance") +
theme_minimal()
#5e.
ggplot(data = Credit, aes(x = Income, y = Balance, color = Student)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Income vs Balance for Students",
x = "Income", y = "Balance") +
theme_minimal()
#5f.
lm(Balance ~ Income + Student + Income:Student, data = Credit)
prostate = read.table("./prostate.data",header=TRUE)
library(leaps)
library(ISLR2)
#1a.
regfit <- regsubsets(lpsa ~ ., data = prostate, nbest=1, nvmax = 9)
regfit_sum <- summary(regfit)
n = dim(prostate)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
smallest_AIC <- subset_table[which.min(subset_table$AIC), ]
smallest_BIC <- subset_table[which.min(subset_table$BIC), ]
largest_Adj_R2 <- subset_table[which.max(subset_table$Adj_R2), ]
smallest_Cp <- subset_table[which.min(subset_table$Cp), ]
smallest_AIC
smallest_BIC
View(prostate)
