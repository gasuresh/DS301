best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = Boston)
summary(final_model)
names(coef(final_model))
n = dim(Boston)[1]
set.seed(10)
train_index = sample(1:n,n/2,rep=FALSE)
train = Boston[train_index,]
test = Boston[-train_index,]
best_train = regsubsets(medv~.,data=train,nbest=1,nvmax=12)
val_errors = rep(NA,8)
for(i in 1:8){
test_mat = model.matrix(medv~.,data=test)
coef_m = coef(best_train,id=i)
pred = test_mat[,names(coef_m)]%*%coef_m
val_errors[i] = mean((test$medv-pred)^2)
}
best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = Boston)
names(coef(final_model))
predictors_smallest_AIC
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Predictor = predictor_names, Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
formula <- as.formula(paste("medv ~", paste(predictors_smallest_AIC, collapse = " + ")))
print(final_model_table)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
formula <- as.formula(paste("medv ~", paste(predictors_smallest_AIC, collapse = " + ")))
print(final_model_table)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
formula <- as.formula(paste("medv ~", paste(predictors_smallest_BIC, collapse = " + ")))
print(final_model_table)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
plot(final_model, which = 1)
plot(final_model, which = 1)
plot(final_model, which = 2)
plot(final_model, which = 1)
plot(final_model, which = 1)
residuals <- residuals(final_model)
predicted <- predict(final_model)
plot(predicted, residuals,
xlab = "Predicted Values", ylab = "Residuals",
main = "Residual Plot")
abline(h = 0, col = "red")
plot(final_model, which = 1)
plot(final_model, which = 1)
plot(final_model, which = 1)
residuals <- residuals(final_model)
predicted <- predict(final_model)
plot(predicted, residuals,
xlab = "Predicted Values", ylab = "Residuals",
main = "Residual Plot")
abline(h = 0, col = "red")
residuals <- residuals(final_model)
predicted <- predict(final_model)
plot(predicted, residuals,
xlab = "Predicted Values", ylab = "Residuals",
main = "Residual Plot")
abline(h = 0, col = "red")
plot(final_model, which = 1)
plot(final_model, which = 1)
plot(final_model, which = 4)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
install.packages("car")
library(car)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
vif_values <- vif(final_model)
vif_values
print(final_model_table)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
formula <- as.formula(paste("medv ~", paste(predictors_smallest_BIC, collapse = " + ")))
final_model <- lm(formula, data = Boston)
formula
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
best_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% "(Intercept)"]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = Boston)
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
print(final_model_table)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
head(Boston)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
best_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% "(Intercept)"]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = Boston)
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
print(final_model_table)
n = dim(Boston)[1]
set.seed(10)
train_index = sample(1:n,n/2,rep=FALSE)
train = Boston[train_index,]
test = Boston[-train_index,]
best_train = regsubsets(medv~.,data=train,nbest=1,nvmax=12)
val_errors = rep(NA,8)
for(i in 1:8){
test_mat = model.matrix(medv~.,data=test)
coef_m = coef(best_train,id=i)
pred = test_mat[,names(coef_m)]%*%coef_m
val_errors[i] = mean((test$medv-pred)^2)
}
best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
potential_final_model <- lm(formula, data = Boston)
plot(final_model, which = 1)
vif_values <- vif(final_model)
vif_values
predictors_smallest_AIC
subset_table
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
best_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% c("(Intercept)", "tax")]
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = Boston)
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
print(final_model_table)
vif_values <- vif(final_model)
vif_values
vif_values <- vif(temp_final_model)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
potential_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% "(Intercept)"]
best_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% c("(Intercept)", "tax")]
potential_formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
temp_model <- lm(potential_formula, data = Boston)
final_model <- lm(formula, data = Boston)
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
print(final_model_table)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
potential_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% "(Intercept)"]
best_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% c("(Intercept)", "tax")]
potential_formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
temp_model <- lm(potential_formula, data = Boston)
# This is the final model
final_model <- lm(formula, data = Boston)
coefficients <- coef(final_model)
predictor_names <- names(coefficients)[-1]
final_model_table <- data.frame(Coefficient = coefficients[-1])
best_model_predictors <- names(coef(best_train, id = best_model_index))
print(final_model_table)
vif_values <- vif(temp_model)
modified_vif_values <- vif(final_model)
flds <- createFolds(Boston$medv, k = 10, list = TRUE, returnTrain = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
library(caret)
flds <- createFolds(Boston$medv, k = 10, list = TRUE, returnTrain = FALSE)
MSE_values <- numeric(k)
num_folds <- 10
flds <- createFolds(Boston$medv, k = num_folds, list = TRUE, returnTrain = FALSE)
MSE_values <- numeric(num_folds)
for(i in 1:num_folds) {
test_index <- flds[[i]]
test <- Boston[test_index, ]
train <- Boston[-test_index, ]
pred_final_model <- predict(final_model, newdata = test)
MSE_values[i] <- mean((test$medv - pred_final_model)^2)
}
bias <- mean(MSE_values)
variance <- var(MSE_values)
bias
variance
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
library(caret)
head(Boston)
regfit <- regsubsets(medv ~ ., data = Boston, nbest=1, nvmax = 12)
regfit_sum <- summary(regfit)
n = dim(Boston)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
predictors_smallest_AIC <- names(coef(regfit, id = which.min(subset_table$AIC)))
predictors_smallest_BIC <- names(coef(regfit, id = which.min(subset_table$BIC)))
predictors_largest_Adj_R2 <- names(coef(regfit, id = which.max(subset_table$Adj_R2)))
predictors_smallest_Cp <- names(coef(regfit, id = which.min(subset_table$Cp)))
potential_model_predictors <- predictors_smallest_BIC[!predictors_smallest_BIC %in% "(Intercept)"]
potential_formula <- as.formula(paste("medv ~", paste(best_model_predictors, collapse = " + ")))
temp_model <- lm(potential_formula, data = Boston)
insurance <- read.csv("./insurance.csv")
insurance <- read.csv("./insurance.csv")
insurance$gender <- factor(insurance$gender)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
ggplot(data = insurance, aes(x = age, y = charges, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Age", y = "Charges", color = "Gender") +
ggtitle("Scatter Plot of Charges vs. Age for Males and Females") +
theme_minimal()
insurance <- read.csv("./insurance.csv")
insurance$gender <- factor(insurance$gender)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
insurance <- read.csv("./insurance.csv")
insurance$gender <- factor(insurance$gender)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
summary(lm(charges~age+bmi+gender, data = insurance))
# Male: charges = -6986.82 + 243.19(age) + 327.54(bmi) + 1344.46
# Female: charges = -6986.82 + 243.19(age) + 327.54(bmi)
male_data <- subset(insurance, gender == "male")
female_data <- subset(insurance, gender == "female")
fit_males <- lm(charges ~ age + bmi, data = male_data)
summary(fit_males)
# charges = -8012.79 + 238.63(age) + 406.87(bmi)
fit_females <- lm(charges ~ age + bmi, data = female_data)
summary(fit_females)
# charges = -4515.22 + 246.92(age) + 241.32(bmi)
insurance <- read.csv("./insurance.csv")
insurance$gender <- factor(insurance$gender)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
model <- lm(charges~age+bmi+gender, data = insurance)
summary(model)
# Male: charges = -6986.82 + 243.19(age) + 327.54(bmi) + 1344.46
# Female: charges = -6986.82 + 243.19(age) + 327.54(bmi)
male_data <- subset(insurance, gender == "male")
female_data <- subset(insurance, gender == "female")
fit_males <- lm(charges ~ age + bmi, data = male_data)
summary(fit_males)
# charges = -8012.79 + 238.63(age) + 406.87(bmi)
fit_females <- lm(charges ~ age + bmi, data = female_data)
summary(fit_females)
# charges = -4515.22 + 246.92(age) + 241.32(bmi)
model
insurance <- read.csv("./insurance.csv")
insurance$gender <- factor(insurance$gender)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
model <- lm(charges ~ age + bmi, data = insurance)
# Male: charges = -6986.82 + 243.19(age) + 327.54(bmi) + 1344.46
# Female: charges = -6986.82 + 243.19(age) + 327.54(bmi)
male_data <- subset(insurance, gender == "male")
fit_males <- lm(charges ~ age + bmi, data = male_data)
# charges = -8012.79 + 238.63(age) + 406.87(bmi)
female_data <- subset(insurance, gender == "female")
fit_females <- lm(charges ~ age + bmi, data = female_data)
# charges = -4515.22 + 246.92(age) + 241.32(bmi)
set.seed(42)
x1 <- runif(100)
x2 <- 0.8 * x1 + rnorm(100, 0, 0.1)
beta0 <- 3
beta1 <- 2
beta2 <- 4
error <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2 + error
correlation <- cor(x1, x2)
print(correlation)
train_indices <- sample(1:100, 80)
train_data <- data.frame(x1 = x1[train_indices], x2 = x2[train_indices], Y = Y[train_indices])
test_data <- data.frame(x1 = x1[-train_indices], x2 = x2[-train_indices], Y = Y[-train_indices])
model <- lm(Y ~ x1 + x2, data = train_data)
test_predictions <- predict(model, newdata = test_data)
test_mse <- mean((test_data$Y - test_predictions)^2)
test_mse
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(leaps)
library(car)
library(caret)
library(tidyverse)
test_mses <- numeric(2500)
for (i in 1:2500) {
epsilon <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2 + epsilon
train_indices <- sample(1:100, 80)
train_data <- data.frame(x1 = x1[train_indices], x2 = x2[train_indices], Y = Y[train_indices])
test_data <- data.frame(x1 = x1[-train_indices], x2 = x2[-train_indices], Y = Y[-train_indices])
model <- lm(Y ~ x1 + x2, data = train_data)
test_predictions <- predict(model, newdata = test_data)
test_mse <- mean((test_data$Y - test_predictions)^2)
test_mses[i] <- test_mse
}
mean_test_mse <- mean(test_mses)
print(paste("Mean Test MSE:", mean_test_mse))
hist(test_mses, main = "Histogram of Test MSEs", xlab = "Test MSE")
mean_test_mse
test_mses <- numeric(2500)
for (i in 1:2500) {
epsilon <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2 + epsilon
train_indices <- sample(1:100, 80)
train_data <- data.frame(x1 = x1[train_indices], x2 = x2[train_indices], Y = Y[train_indices])
test_data <- data.frame(x1 = x1[-train_indices], x2 = x2[-train_indices], Y = Y[-train_indices])
model <- lm(Y ~ x1 + x2, data = train_data)
test_predictions <- predict(model, newdata = test_data)
test_mse <- mean((test_data$Y - test_predictions)^2)
test_mses[i] <- test_mse
}
mean_test_mse <- mean(test_mses)
hist(test_mses, main = "Histogram of Test MSEs", xlab = "Test MSE")
mean_test_mse
set.seed(24)
x1 <- runif(100)
x2 <- rnorm(100, 0, 1)
beta0 <- 3
beta1 <- 2
beta2 <- 4
error <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2 + error
correlation <- cor(x1, x2)
print(correlation)
correlation
set.seed(24)
x1 <- runif(100)
x2 <- rnorm(100, 0, 1)
beta0 <- 3
beta1 <- 2
beta2 <- 4
error <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2 + error
correlation <- cor(x1, x2)
correlation
test_mses_uncorr <- numeric(2500)
for (i in 1:2500) {
epsilon <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2
train_indices <- sample(1:100, 80)
train_data <- data.frame(x1 = x1[train_indices], x2 = x2[train_indices], Y = Y[train_indices])
test_data <- data.frame(x1 = x1[-train_indices], x2 = x2[-train_indices], Y = Y[-train_indices])
model <- lm(Y ~ x1 + x2, data = train_data)
test_predictions <- predict(model, newdata = test_data)
test_mse <- mean((test_data$Y - test_predictions)^2)
test_mses_uncorr[i] <- test_mse
}
mean_test_mse_uncorr <- mean(test_mses_uncorr)
print(paste("Mean Test MSE (Uncorrelated Predictors):", mean_test_mse_uncorr))
hist(test_mses_uncorr, main = "Histogram of Test MSEs (Uncorrelated Predictors)", xlab = "Test MSE")
test_mses_uncorr <- numeric(2500)
for (i in 1:2500) {
epsilon <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * x1 + beta2 * x2
train_indices <- sample(1:100, 80)
train_data <- data.frame(x1 = x1[train_indices], x2 = x2[train_indices], Y = Y[train_indices])
test_data <- data.frame(x1 = x1[-train_indices], x2 = x2[-train_indices], Y = Y[-train_indices])
model <- lm(Y ~ x1 + x2, data = train_data)
test_predictions <- predict(model, newdata = test_data)
test_mse <- mean((test_data$Y - test_predictions)^2)
test_mses_uncorr[i] <- test_mse
}
mean_test_mse_uncorr <- mean(test_mses_uncorr)
hist(test_mses_uncorr, main = "Histogram of Test MSEs (Uncorrelated Predictors)", xlab = "Test MSE")
mean_test_mse_uncorr
