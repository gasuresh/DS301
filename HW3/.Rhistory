x = matrix(rnorm(1000 * i), ncol = i)  # Generate data with varying number of predictors
beta <- c(2, 3, 5, 4, 2, rep(0, i - 5))
error = rnorm(1000, 0, 1)
y = as.matrix(x) %*% beta + error
data = as.data.frame(cbind(y, x))
# Fit multiple linear regression model
fit = lm(y ~ ., data = data)
# Extract p-values and count false positives
p_values = summary(fit)$coefficients[, 4]
false_positives[p == num_tests] = length(which(p_values[6:length(p_values)] < 0.05))
}
num_tests <- seq(150, 800, by = 50)
false_positives <- numeric(length(num_tests))
for (i in num_tests) {
x = matrix(rnorm(1000 * i), ncol = i)  # Generate data with varying number of predictors
beta0 = 2
beta1 = 3
beta2 = 5
beta3 = 4
beta4 = 2
beta5 = 7
error = rnorm(1000, 0, 1)
y = beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] +
beta5*x[,5] + error
data = as.data.frame(cbind(y, x))
fit = lm(y ~ ., data = data)
p_values = summary(fit)$coefficients[, 4]
false_positives[p == num_tests] = length(which(p_values[6:length(p_values)] < 0.05))
}
num_tests <- seq(150, 800, by = 50)
false_positives <- numeric(length(num_tests))
for (i in num_tests) {
x = matrix(rnorm(1000 * i), ncol = i)  # Generate data with varying number of predictors
beta0 = 2
beta1 = 3
beta2 = 5
beta3 = 4
beta4 = 2
beta5 = 7
error = rnorm(1000, 0, 1)
y = beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] +
beta5*x[,5] + error
data = as.data.frame(cbind(y, x))
fit = lm(y ~ ., data = data)
p_values = summary(fit)$coefficients[, 4]
false_positives[p == num_tests] = sum(p_values < 0.05)
}
num_tests <- seq(150, 800, by = 50)
false_positives <- numeric(length(num_tests))
for (i in num_tests) {
x = matrix(rnorm(1000 * i), ncol = i)  # Generate data with varying number of predictors
beta0 = 2
beta1 = 3
beta2 = 5
beta3 = 4
beta4 = 2
beta5 = 7
error = rnorm(1000, 0, 1)
y = beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] +
beta5*x[,5] + error
data = as.data.frame(cbind(y, x))
fit = lm(y ~ ., data = data)
p_values = summary(fit)$coefficients[, 4]
false_positives[i == num_tests] = sum(p_values < 0.05)
}
num_tests <- seq(150, 800, by = 50)
false_positives <- numeric(length(num_tests))
for (i in num_tests) {
x = matrix(rnorm(1000 * i), ncol = i)
beta0 = 2
beta1 = 3
beta2 = 5
beta3 = 4
beta4 = 2
beta5 = 7
error = rnorm(1000, 0, 1)
y = beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] +
beta5*x[,5] + error
data = as.data.frame(cbind(y, x))
fit = lm(y ~ ., data = data)
p_values = summary(fit)$coefficients[, 4]
false_positives[i == num_tests] = sum(p_values < 0.05)
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Number of Tests Carried Out",
y = "Number of False Positives")
num_tests <- seq(150, 800, by = 50)
false_positives <- numeric(length(num_tests))
for (i in num_tests) {
x = matrix(rnorm(1000 * i), ncol = i)
beta0 = 2
beta1 = 3
beta2 = 5
beta3 = 4
beta4 = 2
beta5 = 7
error = rnorm(1000, 0, 1)
y = beta0 + beta1*x[,1] + beta2*x[,2] + beta3*x[,3] + beta4*x[,4] +
beta5*x[,5] + error
data = as.data.frame(cbind(y, x))
fit = lm(y ~ ., data = data)
p_values = summary(fit)$coefficients[, 4]
false_positives[i == num_tests] = sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = i, false_positives = num_false_positives))
}
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
# Simulation loop
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, p - 5))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- lm(y ~ ., data = data)
p_values <- summary(fit)$coefficients[6:length(fit$coefficients), 4]
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
# Create a ggplot
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Number of Tests Carried Out",
y = "Number of False Positives")
set.seed(1)
X1 <- seq(0, 10, length.out = 100)
X2 <- runif(100)
beta0 <- 2
beta1 <- 3
beta2 <- 5
error <- rnorm(100, mean = 0, sd = 2)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
model <- lm(true_Y ~ X1 + X2)
model <- lm(Y ~ X1 + X2)
residuals <- lm_model$residuals
set.seed(1)
n <- 100
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
model <- lm(Y ~ X1 + X2)
residuals <- model$residuals
hat_sigma_squared <- sum(residuals^2) / (n - 3)
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", hat_sigma_squared, "\n")
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
hat_sigma_squared <- sum(residuals^2) / (n - 3)
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", hat_sigma_squared, "\n")
sim_results <- numeric(num_simulations)
set.seed(1)
n <- 100
num_simulations <- 1000
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
# Generate data
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
# Fit model
sim_model <- lm(Y ~ X1 + X2)
# Calculate and store hat(sigma)^2
residuals <- sim_model$residuals
hat_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- hat_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", hat_sigma_squared, "\n")
set.seed(1)
n <- 100
num_simulations <- 5000
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
hat_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- hat_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", hat_sigma_squared, "\n")
sim_results
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
pred_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- pred_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", mean(sim_results), "\n")
set.seed(1)
n <- 100
num_simulations <- 1000
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
pred_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- pred_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", mean(sim_results), "\n")
set.seed(1)
n <- 100
num_simulations <- 5000
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
pred_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- pred_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", mean(sim_results), "\n")
df <- data.frame(hat_sigma_squared = sim_results)
ggplot(df, aes(x = hat_sigma_squared)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = sigma^2, color = "red", linetype = "dashed", size = 1) +
labs(title = "Distribution of Estimated sigma^2",
x = "hat(sigma)^2",
y = "Frequency") +
theme_minimal()
df <- data.frame(hat_sigma_squared = sim_results)
ggplot(df, aes(x = hat_sigma_squared)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = sigma^2, color = "red", linetype = "dashed") +
labs(title = "Distribution of Estimated sigma^2",
x = "hat(sigma)^2",
y = "Frequency") +
theme_minimal()
df <- data.frame(hat_sigma_squared = sim_results)
ggplot(df, aes(x = hat_sigma_squared)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = sigma^2, color = "red", linetype = "dashed") +
labs(title = "Distribution of Predicted sigma^2",
x = "Predicted sigma^2",
y = "Frequency") +
theme_minimal()
df <- data.frame(pred_sigma_squared = sim_results)
ggplot(df, aes(x = pred_sigma_squared)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = sigma^2, color = "red", linetype = "dashed") +
labs(title = "Distribution of Predicted sigma^2",
x = "Predicted sigma^2",
y = "Frequency") +
theme_minimal()
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
pred_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- pred_sigma_squared
}
cat("True sigma^2:", sigma^2, "\n")
cat("Estimated hat(sigma)^2:", mean(sim_results), "\n")
summary(model)
knitr::opts_chunk$set(echo = TRUE)
model <- lm(Sales ~ CompPrice + Income + Advertising + Population + Price + Age + Education + Urban + US, data = Carseats)
coefficients_table <- as.data.frame(summary(model)$coefficients[, c("Estimate", "Std. Error")])
rownames(coefficients_table)[rownames(coefficients_table) == "UrbanYes"] <- "Urban"
rownames(coefficients_table)[rownames(coefficients_table) == "USYes"] <- "US"
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
library(tidyverse)
head(Carseats)
#1a.
model <- lm(Sales ~ CompPrice + Income + Advertising + Population + Price + Age + Education + Urban + US, data = Carseats)
coefficients_table <- as.data.frame(summary(model)$coefficients[, c("Estimate", "Std. Error")])
rownames(coefficients_table)[rownames(coefficients_table) == "UrbanYes"] <- "Urban"
rownames(coefficients_table)[rownames(coefficients_table) == "USYes"] <- "US"
#1a.
age_summary <- summary(model)$coefficients["Age", c("t value", "Pr(>|t|)")]
alpha <- 0.05
reject <- age_summary["Pr(>|t|)"] < alpha ## reject if true
n <- dim(Carseats)[1]
p <- 9
df <- n - (p+1)
#1c.
sigma_sqr <- sum(model$residual^2)/(n-(p+1))
#1e.
residuals_full <- residuals(model)
rss_full <- sum(residuals_full^2)
reduced_model <- lm(Sales~1, data = Carseats)
residuals_reduced <- residuals(reduced_model)
rss_reduced <- sum(residuals_reduced^2)
#1g.
new_data <- data.frame(
CompPrice = mean(Carseats$CompPrice),
Income = median(Carseats$Income),
Advertising = 15,
Population = 500,
Price = 50,
Age = 30,
Education = 10,
Urban = "Yes",
US = "Yes"
)
confidence_interval <- predict(model, newdata = new_data, interval = "confidence", level = 0.95)
#1h.
prediction_interval <- predict(model, newdata = new_data, interval = "prediction", level = 0.95)
#1j.
new_data$Price <- 450
new_confidence_interval <- predict(model, newdata = new_data, interval = "confidence", level = 0.95)
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, p - 5))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- lm(y ~ ., data = data)
p_values <- coef(summary(fit))[, "Pr(>|t|)"]
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
#3b.
set.seed(1)
n <- 100
num_simulations <- 5000
X1 <- seq(0, 10, length.out = n)
X2 <- runif(n)
beta0 <- 2
beta1 <- 3
beta2 <- 5
sigma <- 2
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
#3c.
sim_results <- numeric(num_simulations)
for (i in 1:num_simulations) {
error <- rnorm(n, mean = 0, sd = sigma)
Y <- beta0 + beta1 * X1 + beta2 * X2 + error
sim_model <- lm(Y ~ X1 + X2)
residuals <- sim_model$residuals
pred_sigma_squared <- sum(residuals^2) / (n - 3)
sim_results[i] <- pred_sigma_squared
}
estimated_sigma_sqr <- mean(sim_results)
#3d.
df <- data.frame(pred_sigma_squared = sim_results)
ggplot(df, aes(x = pred_sigma_squared)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
geom_vline(xintercept = sigma^2, color = "red", linetype = "dashed") +
labs(title = "Distribution of Predicted sigma^2",
x = "Predicted sigma^2",
y = "Frequency") +
theme_minimal()
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, p - 5))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- suppressWarnings(lm(y ~ ., data = data))
p_values <- coef(summary(fit))[, "Pr(>|t|)"]
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, max(p - 5, 0))
error <- rnorm(1000, 0, 1)
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, max(p - 5, 0)))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- suppressWarnings(lm(y ~ ., data = data))
p_values <- coef(summary(fit))[, "Pr(>|t|)"]
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, max(p - 5, 0)))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- suppressWarnings(lm(y ~ ., data = data))
p_values <- coef(summary(fit))[, "Pr(>|t|)"]
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, p - 5))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- lm(y ~ ., data = data)
if (length(coefficients(fit)) > 1) {
p_values <- coef(summary(fit))[, "Pr(>|t|)"]
num_false_positives <- sum(p_values < 0.05)
}
else {
num_false_positives <- 0
}
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
#2b.
results_df <- data.frame(num_tests = numeric(), false_positives = numeric())
for (p in seq(150, 800, by = 50)) {
x <- matrix(rnorm(1000 * p), ncol = p)
beta <- c(2, 3, 5, 4, 2, rep(0, max(p - 5, 0)))
error <- rnorm(1000, 0, 1)
y <- as.matrix(x) %*% beta + error
data <- as.data.frame(cbind(y, x))
fit <- lm(y ~ ., data = data)
p_values <- suppressWarnings(coef(summary(fit))[, "Pr(>|t|)"])
num_false_positives <- sum(p_values < 0.05)
results_df <- rbind(results_df, data.frame(num_tests = p, false_positives = num_false_positives))
}
ggplot(results_df, aes(x = num_tests, y = false_positives)) +
geom_line() +
geom_point() +
labs(title = "Impact of Multiple Testing on False Positives",
x = "Num Tests",
y = "Num of False Positives")
