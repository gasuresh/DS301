prostate = read.table(‘.../prostate.data’,header=TRUE)
prostate = read.table("/prostate.data",header=TRUE)
prostate = read.table("./prostate.data",header=TRUE)
prostate = read.table("./prostate.data",header=TRUE)
View(prostate)
predictors_df <- as.data.frame(prostate[, predictors])
predictors_df <- as.data.frame(prostate[, colnames(prostate)[!colnames(prostate) %in% prostate$lpsa]])
best_subsets <- regsubsets(lpsa~ ., data = predictors_df, nvmax = 8)
prostate = read.table("./prostate.data",header=TRUE)
library(leaps)
predictors_df <- as.data.frame(prostate[, colnames(prostate)[!colnames(prostate) %in% prostate$lpsa]])
best_subsets <- regsubsets(lpsa~ ., data = predictors_df, nvmax = 8)
summary_best_subsets <- summary(best_subsets)
subset_table <- data.frame(
predictors = 1:8,
AIC = summary_best_subsets$aic,
BIC = summary_best_subsets$bic,
Adj_R2 = summary_best_subsets$adjr2,
Cp = summary_best_subsets$cp
)
best_subset <- regsubsets(lpsa ~ ., data = prostate, nvmax = 8)
summary_best_subset <- summary(best_subset)
subset_table <- cbind(summary_best_subset$outmat, AIC = summary_best_subset$cp, BIC = summary_best_subset$bic, Adj_R2 = summary_best_subset$adjr2)
print(subset_table)
smallest_AIC <- which.min(summary_best_subset$cp)
smallest_BIC <- which.min(summary_best_subset$bic)
largest_Adj_R2 <- which.max(summary_best_subset$adjr2)
smallest_Cp <- which.min(summary_best_subset$cp)
best_subset <- regsubsets(lpsa ~ ., data = prostate, nvmax = 9)
summary_best_subset <- summary(best_subset)
subset_table <- cbind(summary_best_subset$outmat, AIC = summary_best_subset$cp, BIC = summary_best_subset$bic, Adj_R2 = summary_best_subset$adjr2)
print(subset_table)
smallest_AIC <- which.min(summary_best_subset$cp)
smallest_BIC <- which.min(summary_best_subset$bic)
largest_Adj_R2 <- which.max(summary_best_subset$adjr2)
smallest_Cp <- which.min(summary_best_subset$cp)
best_subset <- regsubsets(lpsa ~ ., data = prostate, nvmax = 9)
summary_best_subset <- summary(best_subset)
subset_table <- cbind(summary_best_subset$outmat, AIC = summary_best_subset$cp, BIC = summary_best_subset$bic, Adj_R2 = summary_best_subset$adjr2)
smallest_AIC <- which.min(summary_best_subset$cp)
smallest_BIC <- which.min(summary_best_subset$bic)
largest_Adj_R2 <- which.max(summary_best_subset$adjr2)
smallest_Cp <- which.min(summary_best_subset$cp)
smallest_AIC
smallest_BIC
largest_Adj_R2
smallest_Cp
prostate = read.table("./prostate.data",header=TRUE)
library(leaps)
#1b.
train = subset(prostate,train==TRUE)[,1:9]
test = subset(prostate,train==FALSE)[,1:9]
best_train = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
val_errors = rep(NA,8)
for(i in 1:8){
test_mat = model.matrix(lpsa~.,data=test)
coef_m = coef(best_train,id=i)
pred = test_mat[,names(coef_m)]%*%coef_m
val_errors[i] = mean((test$lpsa-pred)^2)
}
best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("lpsa ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = prostate)
best_model_index
best_model_predictors
final_model
#1c.
k <- 10
folds <- sample(1:k, nrow(prostate), replace = TRUE)
val_errors <- matrix(NA, nrow = k, ncol = 9)
for (j in 1:k) {
test <- prostate[folds == j, ]
train <- prostate[folds != j, ]
best_train <- regsubsets(lpsa ~ ., data = train, nbest = 1, nvmax = 9)
for (i in 1:8) {
test_mat <- model.matrix(lpsa ~ ., data = test)
coef_m <- coef(best_train, id = i)
pred <- test_mat[, names(coef_m)] %*% coef_m
val_errors[j, i] <- mean((test$lpsa - pred)^2)
}
}
cv_errors <- apply(val_errors, 2, mean)
best_model_size <- which.min(cv_errors)
final_model <- regsubsets(lpsa ~ ., data = prostate, nvmax = best_model_size, nbest = 1)
final_model
best_model_size
cv_errors
final_model
prostate = read.table("./prostate.data",header=TRUE)
library(leaps)
library(ISLR2)
#1a.
regfit <- regsubsets(lpsa ~ ., data = prostate, nbest=1, nvmax = 9)
regfit_sum <- summary(regfit)
n = dim(prostate)[1]
p = rowSums(regfit_sum$which)
adjr2 = regfit_sum$adjr2
cp = regfit_sum$cp
rss = regfit_sum$rss
AIC = n*log(rss/n) + 2*(p)
BIC = n*log(rss/n) + (p)*log(n)
subset_table <- data.frame(RSS = rss, Adj_R2 = adjr2, Cp = cp, AIC = AIC, BIC = BIC)
smallest_AIC <- subset_table[which.min(subset_table$AIC), ]
smallest_BIC <- subset_table[which.min(subset_table$BIC), ]
largest_Adj_R2 <- subset_table[which.max(subset_table$Adj_R2), ]
smallest_Cp <- subset_table[which.min(subset_table$Cp), ]
#1b.
train = subset(prostate,train==TRUE)[,1:9]
test = subset(prostate,train==FALSE)[,1:9]
best_train = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
val_errors = rep(NA,8)
for(i in 1:8){
test_mat = model.matrix(lpsa~.,data=test)
coef_m = coef(best_train,id=i)
pred = test_mat[,names(coef_m)]%*%coef_m
val_errors[i] = mean((test$lpsa-pred)^2)
}
best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("lpsa ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = prostate)
#1c.
k <- 10
folds <- sample(1:k, nrow(prostate), replace = TRUE)
val_errors <- matrix(NA, nrow = k, ncol = 9)
for (j in 1:k) {
test <- prostate[folds == j, ]
train <- prostate[folds != j, ]
best_train <- regsubsets(lpsa ~ ., data = train, nbest = 1, nvmax = 9)
for (i in 1:8) {
test_mat <- model.matrix(lpsa ~ ., data = test)
coef_m <- coef(best_train, id = i)
pred <- test_mat[, names(coef_m)] %*% coef_m
val_errors[j, i] <- mean((test$lpsa - pred)^2)
}
}
cv_errors <- apply(val_errors, 2, mean)
best_model_size <- which.min(cv_errors)
final_model <- regsubsets(lpsa ~ ., data = prostate, nvmax = best_model_size, nbest = 1)
#1e.
m1 = lm(mpg~horsepower,data=Auto)
summary(m1)
par(mfrow=c(2,2))
plot(m1)
m2 = lm(medv ~ poly(horsepower, 2, raw = TRUE), data = Auto)
m2 = lm(mpg ~ poly(horsepower, 2, raw = TRUE), data = Auto)
summary(m2)
par(mfrow=c(2,2))
plot(m2)
prostate = read.table("./prostate.data",header=TRUE)
library(leaps)
library(ISLR2)
#1b.
train = subset(prostate,train==TRUE)[,1:9]
test = subset(prostate,train==FALSE)[,1:9]
best_train = regsubsets(lpsa~.,data=train,nbest=1,nvmax=8)
val_errors = rep(NA,8)
for(i in 1:8){
test_mat = model.matrix(lpsa~.,data=test)
coef_m = coef(best_train,id=i)
pred = test_mat[,names(coef_m)]%*%coef_m
val_errors[i] = mean((test$lpsa-pred)^2)
}
best_model_index <- which.min(val_errors)
best_model_predictors <- names(coef(best_train, id = best_model_index))
best_model_predictors <- best_model_predictors[!best_model_predictors %in% "(Intercept)"]
formula <- as.formula(paste("lpsa ~", paste(best_model_predictors, collapse = " + ")))
final_model <- lm(formula, data = prostate)
#1c.
k <- 10
folds <- sample(1:k, nrow(prostate), replace = TRUE)
val_errors <- matrix(NA, nrow = k, ncol = 9)
for (j in 1:k) {
test <- prostate[folds == j, ]
train <- prostate[folds != j, ]
best_train <- regsubsets(lpsa ~ ., data = train, nbest = 1, nvmax = 9)
for (i in 1:9) {
test_mat <- model.matrix(lpsa ~ ., data = test)
coef_m <- coef(best_train, id = i)
pred <- test_mat[, names(coef_m)] %*% coef_m
val_errors[j, i] <- mean((test$lpsa - pred)^2)
}
}
cv_errors <- apply(val_errors, 2, mean)
best_model_size <- which.min(cv_errors)
final_model <- regsubsets(lpsa ~ ., data = prostate, nvmax = best_model_size, nbest = 1)
best_model_size
cv_errors
